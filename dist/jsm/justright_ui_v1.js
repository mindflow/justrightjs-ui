import{EventRegistry,ComponentFactory,CanvasStyles,CanvasRoot,StylesRegistry,InputElementDataBinding,EmailValidator,RequiredValidator,PasswordValidator,EqualsValidator,AndValidatorSet}from"./justright_core_v1.js";import{Logger,ObjectFunction}from"./coreutil_v1.js";import{InjectionPoint}from"./mindi_v1.js";const LOG=new Logger("BackShade");class BackShade{static get COMPONENT_NAME(){return"BackShade"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/backShade.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/backShade.css"}constructor(){this.eventRegistry=InjectionPoint.instance(EventRegistry),this.componentFactory=InjectionPoint.instance(ComponentFactory)}postConfig(){LOG.info("Post config"),this.component=this.componentFactory.create("BackShade")}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("backShade"),"onclick","//event:backShadeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:backShadeClicked",t,this.component.getComponentIndex()),this}disableAfter(t){this.mountSelf(),this.getComponent().get("backShade").setAttributeValue("class","back-shade fade"),setTimeout(()=>{this.getComponent().get("backShade").setStyle("display","none")},t),setTimeout(()=>{CanvasStyles.disableStyle(BackShade.COMPONENT_NAME)},t+1)}disable(){this.disableAfter(500)}enable(){CanvasStyles.enableStyle(BackShade.COMPONENT_NAME),this.mountSelf(),this.getComponent().get("backShade").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("backShade").setAttributeValue("class","back-shade fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||CanvasRoot.addBodyElement(this.getComponent().getRootElement())}removeSelf(){this.getComponent().remove()}}const LOG$1=new Logger("Button");class Button{static get COMPONENT_NAME(){return"Button"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/button.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/button.css"}static get TYPE_PRIMARY(){return"btn-primary"}static get TYPE_SECONDARY(){return"btn-secondary"}static get TYPE_SUCCESS(){return"btn-success"}static get TYPE_INFO(){return"btn-info"}static get TYPE_WARNING(){return"btn-warning"}static get TYPE_DANGER(){return"btn-danger"}static get TYPE_LIGHT(){return"btn-light"}static get TYPE_DARK(){return"btn-dark"}constructor(t,e=Button.TYPE_PRIMARY){this.label=t,this.componentFactory=InjectionPoint.instance(ComponentFactory),this.buttonType=e,this.eventRegistry=InjectionPoint.instance(EventRegistry)}postConfig(){this.component=this.componentFactory.create("Button"),CanvasStyles.enableStyle(Button.COMPONENT_NAME),this.component.get("button").setChild(this.label),this.component.get("button").setAttributeValue("class","btn "+this.buttonType)}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("button"),"onclick","//event:buttonClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:buttonClicked",t,this.component.getComponentIndex()),this}disable(){this.getComponent().get("button").setAttributeValue("disabled","true")}enable(){this.getComponent().get("button").removeAttribute("disabled")}}const LOG$2=new Logger("DialogBox");class DialogBox{static get COMPONENT_NAME(){return"DialogBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/dialogBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/dialogBox.css"}constructor(){this.eventRegistry=InjectionPoint.instance(EventRegistry),this.componentFactory=InjectionPoint.instance(ComponentFactory),this.component=null,this.backShade=InjectionPoint.instance(BackShade),this.stylesRegistry=InjectionPoint.instance(StylesRegistry)}postConfig(){LOG$2.info("Post config"),this.component=this.componentFactory.create("DialogBox"),this.eventRegistry.attach(this.component.get("closeButton"),"onclick","//event:closeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:closeClicked",new ObjectFunction(this,this.hide),this.component.getComponentIndex()),this.backShade=this.backShade.withClickListener(new ObjectFunction(this,this.hide))}getComponent(){return this.component}setTitle(t){this.getComponent().setChild("title",t)}setFooter(t){this.getComponent().get("footer").setStyle("display","block"),this.getComponent().setChild("footer",t)}setContent(t){this.getComponent().setChild("content",t)}set(t,e){this.getComponent().set(t,e)}hide(){this.backShade.mountSelf(),this.mountSelf(),this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade"),setTimeout(()=>{this.getComponent().get("dialogBox").setStyle("display","none");this.backShade.disableAfter(500)},200),setTimeout(()=>{CanvasStyles.disableStyle(DialogBox.COMPONENT_NAME)},201)}show(){CanvasStyles.enableStyle(DialogBox.COMPONENT_NAME),this.backShade.mountSelf(),this.mountSelf(),this.backShade.enable(),this.getComponent().get("dialogBox").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||CanvasRoot.addBodyElement(this.getComponent().getRootElement())}removeSelf(){CanvasStyles.removeStyle(DialogBox.COMPONENT_NAME),this.getComponent().removeSelf()}}const LOG$3=new Logger("CheckBox");class CheckBox{static get COMPONENT_NAME(){return"CheckBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/checkBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/checkBox.css"}constructor(t){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.name=t}postConfig(){this.component=this.componentFactory.create("CheckBox"),CanvasStyles.enableStyle(CheckBox.COMPONENT_NAME),this.component.get("checkBox").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return InputElementDataBinding.link(t,e).to(this.component.get("checkBox")),this}withClickListener(t){return this.eventRegistry.attach(this.component.get("checkBox"),"onclick","//event:checkBoxClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:checkBoxClicked",t,this.component.getComponentIndex()),this}withEnterListener(t){this.eventRegistry.attach(this.component.get("checkBox"),"onkeyup","//event:checkBoxEnter",this.component.getComponentIndex());let e=new ObjectFunction(this,e=>{13===e.getKeyCode()&&t.call()});return this.eventRegistry.listen("//event:checkBoxEnter",e,this.component.getComponentIndex()),this}}const LOG$4=new Logger("EmailInput"),BLUR_EVENT="//event:emailInputBlur",KEYUP_EVENT="//event:emailInputKeyUp",CHANGE_EVENT="//event:emailInputChange",ERROR_CLICK_EVENT="//event:emailErrorClicked";class EmailInput{static get COMPONENT_NAME(){return"EmailInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/emailInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/emailInput.css"}constructor(t){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.name=t,this.validator=(new EmailValidator).withValidListener(new ObjectFunction(this,this.hideValidationError)),this.changed=!1}postConfig(){this.component=this.componentFactory.create("EmailInput"),CanvasStyles.enableStyle(EmailInput.COMPONENT_NAME);const t=this.component.getComponentIndex(),e=this.component.get("emailInput"),n=this.component.get("emailError");e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur",BLUR_EVENT,t),this.eventRegistry.attach(e,"onkeyup",KEYUP_EVENT,t),this.eventRegistry.attach(e,"onchange",CHANGE_EVENT,t),this.eventRegistry.attach(n,"onclick",ERROR_CLICK_EVENT,t),this.eventRegistry.listen(BLUR_EVENT,new ObjectFunction(this,this.blurred),t),this.eventRegistry.listen(KEYUP_EVENT,new ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen(CHANGE_EVENT,new ObjectFunction(this,this.change),t),this.eventRegistry.listen(ERROR_CLICK_EVENT,new ObjectFunction(this,this.hideValidationError),t),this.withPlaceholder("Email")}getComponent(){return this.component}change(){this.changed=!0}keyUp(t){if(this.changed=!0,13===t.getKeyCode())return this.validator.isValid()?void(this.enterListener&&this.enterListener.call()):(this.showValidationError(),void this.selectAll())}getValidator(){return this.validator}withModel(t){return InputElementDataBinding.link(t,this.validator).to(this.component.get("emailInput")),this}withPlaceholder(t){return this.component.get("emailInput").setAttributeValue("placeholder",t),this}withEnterListener(t){return this.enterListener=t,this}blurred(){if(this.changed)return this.validator.isValid()?void this.hideValidationError():void this.showValidationError()}showValidationError(){this.component.get("emailError").setStyle("display","block")}hideValidationError(){this.component.get("emailError").setStyle("display","none")}focus(){this.component.get("emailInput").focus()}selectAll(){this.component.get("emailInput").selectAll()}enable(){this.component.get("emailInput").enable()}disable(){this.component.get("emailInput").disable()}}const LOG$5=new Logger("PasswordInput"),INPUT="passwordInput",ERROR="passwordError",BLUR_EVENT$1="//event:passwordInputBlur",KEYUP_EVENT$1="//event:passwordInputKeyUp",CHANGE_EVENT$1="//event:passwordInputChange",ERROR_CLICK_EVENT$1="//event:passwordErrorClicked";class PasswordInput{static get COMPONENT_NAME(){return"PasswordInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordInput.css"}constructor(t){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.name=t,this.validator=(new RequiredValidator).withValidListener(new ObjectFunction(this,this.hideValidationError)),this.changed=!1}postConfig(){this.component=this.componentFactory.create("PasswordInput"),CanvasStyles.enableStyle(PasswordInput.COMPONENT_NAME);const t=this.component.getComponentIndex(),e=this.component.get(INPUT),n=this.component.get(ERROR);e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur",BLUR_EVENT$1,t),this.eventRegistry.attach(e,"onkeyup",KEYUP_EVENT$1,t),this.eventRegistry.attach(e,"onchange",CHANGE_EVENT$1,t),this.eventRegistry.attach(n,"onclick",ERROR_CLICK_EVENT$1,t),this.eventRegistry.listen(BLUR_EVENT$1,new ObjectFunction(this,this.passwordInputBlurred),t),this.eventRegistry.listen(KEYUP_EVENT$1,new ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen(CHANGE_EVENT$1,new ObjectFunction(this,this.change),t),this.eventRegistry.listen(ERROR_CLICK_EVENT$1,new ObjectFunction(this,this.hideValidationError),t),this.withPlaceholder("Password")}getComponent(){return this.component}change(){this.changed=!0}keyUp(t){if(this.changed=!0,13===t.getKeyCode())return this.validator.isValid()?void(this.enterListener&&this.enterListener.call()):(this.showValidationError(),void this.selectAll())}getValidator(){return this.validator}withModel(t){return InputElementDataBinding.link(t,this.validator).to(this.component.get(INPUT)),this}withPlaceholder(t){return this.component.get(INPUT).setAttributeValue("placeholder",t),this}withEnterListener(t){return this.enterListener=t,this}passwordInputBlurred(){if(this.changed)return this.validator.isValid()?void this.hideValidationError():void this.showValidationError()}showValidationError(){this.component.get(ERROR).setStyle("display","block")}hideValidationError(){this.component.get(ERROR).setStyle("display","none")}focus(){this.component.get(INPUT).focus()}selectAll(){this.component.get(INPUT).selectAll()}enable(){this.component.get(INPUT).enable()}disable(){this.component.get(INPUT).disable()}}const LOG$6=new Logger("PasswordMatcherInput"),INPUT$1="passwordMatcherInput",CONTROL_INPUT="passwordMatcherControlInput",ERROR$1="passwordMatcherError",CONTROL_ERROR="passwordMatcherControlError",BLUR_EVENT$2="//event:passwordMatcherInputBlur",KEYUP_EVENT$2="//event:passwordMatcherInputKeyUp",CHANGE_EVENT$2="//event:passwordMatcherInputChange",ERROR_CLICK_EVENT$2="//event:passwordMatcherErrorClicked",CONTROL_BLUR_EVENT="//event:passwordMatcherControlInputBlur",CONTROL_KEYUP_EVENT="//event:passwordMatcherControlInputKeyUp",CONTROL_CHANGE_EVENT="//event:passwordMatcherControlInputChange",CONTROL_ERROR_CLICK_EVENT="//event:passwordMatcherControlErrorClicked";class PasswordMatcherInput{static get COMPONENT_NAME(){return"PasswordMatcherInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.css"}constructor(t){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.name=t,this.passwordValidator=(new PasswordValidator).withValidListener(new ObjectFunction(this,this.hidePasswordValidationError)),this.controlValidator=(new EqualsValidator).withValidListener(new ObjectFunction(this,this.hideControlValidationError)),this.validator=(new AndValidatorSet).withValidator(this.passwordValidator).withValidator(this.controlValidator),this.changed=!1,this.controlChanged=!1}postConfig(){this.component=this.componentFactory.create("PasswordMatcherInput"),CanvasStyles.enableStyle(PasswordMatcherInput.COMPONENT_NAME);const t=this.component.getComponentIndex(),e=this.component.get(INPUT$1),n=this.component.get(ERROR$1),i=this.component.get(CONTROL_INPUT),o=this.component.get(CONTROL_ERROR);e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur",BLUR_EVENT$2,t),this.eventRegistry.attach(e,"onkeyup",KEYUP_EVENT$2,t),this.eventRegistry.attach(e,"onchange",CHANGE_EVENT$2,t),this.eventRegistry.attach(n,"onclick",ERROR_CLICK_EVENT$2,t),this.eventRegistry.attach(i,"onblur",CONTROL_BLUR_EVENT,t),this.eventRegistry.attach(i,"onkeyup",CONTROL_KEYUP_EVENT,t),this.eventRegistry.attach(i,"onchange",CONTROL_CHANGE_EVENT,t),this.eventRegistry.attach(o,"onclick",CONTROL_ERROR_CLICK_EVENT,t),this.eventRegistry.listen(BLUR_EVENT$2,new ObjectFunction(this,this.blur),t),this.eventRegistry.listen(KEYUP_EVENT$2,new ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen(CHANGE_EVENT$2,new ObjectFunction(this,this.change),t),this.eventRegistry.listen(ERROR_CLICK_EVENT$2,new ObjectFunction(this,this.hidePasswordValidationError),t),this.eventRegistry.listen(CONTROL_BLUR_EVENT,new ObjectFunction(this,this.controlBlur),t),this.eventRegistry.listen(CONTROL_KEYUP_EVENT,new ObjectFunction(this,this.controlKeyUp),t),this.eventRegistry.listen(CONTROL_CHANGE_EVENT,new ObjectFunction(this,this.controlChange),t),this.eventRegistry.listen(CONTROL_ERROR_CLICK_EVENT,new ObjectFunction(this,this.hideControlValidationError),t),this.withPlaceholder("Password","Confirm password")}controlChange(){this.changed=!0}controlKeyUp(t){if(""!==this.component.get(CONTROL_INPUT).getValue()&&(this.controlChanged=!0),13===t.getKeyCode())return this.controlValidator.isValid()?void(this.enterListener&&this.enterListener.call()):(this.showControlValidationError(),void this.selectAllControl())}change(){this.component.get(CONTROL_INPUT).getValue()!==this.component.get(INPUT$1).getValue()&&this.component.get(CONTROL_INPUT).setValue(""),this.changed=!0}keyUp(t){if(""!==this.component.get(INPUT$1).getValue()&&(this.changed=!0),this.controlValidator.setValue(this.component.get(INPUT$1).getValue()),this.controlValidator.validate(this.component.get(CONTROL_INPUT).getValue()),13===t.getKeyCode()){if(!this.passwordValidator.isValid())return this.showPasswordValidationError(),void this.selectAll();this.focusControl(),this.selectAllControl()}}getComponent(){return this.component}getValidator(){return this.validator}withModel(t){return InputElementDataBinding.link(t,this.passwordValidator).to(this.component.get(INPUT$1)),InputElementDataBinding.link(t,this.controlValidator).to(this.component.get(CONTROL_INPUT)),this}withPlaceholder(t,e){return this.component.get(INPUT$1).setAttributeValue("placeholder",t),this.component.get(CONTROL_INPUT).setAttributeValue("placeholder",e),this}withEnterListener(t){return this.enterListener=t,this}controlBlur(){if(this.controlChanged)return this.controlValidator.isValid()?void this.hideControlValidationError():void this.showControlValidationError()}blur(){if(this.changed)return this.passwordValidator.isValid()?void this.hidePasswordValidationError():void this.showPasswordValidationError()}showPasswordValidationError(){this.component.get(ERROR$1).setStyle("display","block")}hidePasswordValidationError(){this.component.get(ERROR$1).setStyle("display","none")}showControlValidationError(){this.component.get(CONTROL_ERROR).setStyle("display","block")}hideControlValidationError(){this.component.get(CONTROL_ERROR).setStyle("display","none")}focus(){this.component.get(INPUT$1).focus()}focusControl(){this.component.get(CONTROL_INPUT).focus()}selectAll(){this.component.get(INPUT$1).selectAll()}selectAllControl(){this.component.get(CONTROL_INPUT).selectAll()}enable(){this.component.get(INPUT$1).enable()}disable(){this.component.get(INPUT$1).disable()}enableControl(){this.component.get(CONTROL_INPUT).enable()}disableControl(){this.component.get(CONTROL_INPUT).disable()}}const LOG$7=new Logger("TextInput"),KEYUP_EVENT$3="//event:textInputKeyUp",CLICK_EVENT="//event:textInputClicked";class TextInput{static get COMPONENT_NAME(){return"TextInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/textInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/textInput.css"}constructor(t){this.componentFactory=ComponentFactory,this.eventRegistry=EventRegistry,this.name=t;const e=this.component.getComponentIndex(),n=this.component.get("textInput");this.eventRegistry.attach(n,"onkeyup",KEYUP_EVENT$3,e),this.eventRegistry.attach(n,"onclick",CLICK_EVENT,e),this.eventRegistry.listen(KEYUP_EVENT$3,new ObjectFunction(this,this.keyUp),e),this.eventRegistry.listen(CLICK_EVENT,new ObjectFunction(this,this.click),e)}keyUp(t){13===t.getKeyCode()&&this.enterListener&&this.enterListener.call()}click(t){this.clickListener&&this.clickListener.call()}postConfig(){this.component=this.componentFactory.create("TextInput"),CanvasStyles.enableStyle(TextInput.COMPONENT_NAME),this.component.get("textInput").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return InputElementDataBinding.link(t,e).to(this.component.get("textInput")),this}withPlaceholder(t){return this.component.get("textInput").setAttributeValue("placeholder",t),this}withClickListener(t){return this.clickListener=t,this}withEnterListener(t){return this.enterListener=t,this}}export{BackShade,Button,CheckBox,DialogBox,EmailInput,PasswordInput,PasswordMatcherInput,TextInput};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
