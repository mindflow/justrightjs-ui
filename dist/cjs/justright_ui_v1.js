"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var justright_core_v1=require("justright_core_v1"),coreutil_v1=require("coreutil_v1"),mindi_v1=require("mindi_v1");const LOG=new coreutil_v1.Logger("BackShade");class BackShade{static get COMPONENT_NAME(){return"BackShade"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/backShade.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/backShade.css"}constructor(){this.eventRegistry=justright_core_v1.EventRegistry,this.componentFactory=justright_core_v1.ComponentFactory}createComponent(){LOG.info("creating component"),this.component=this.componentFactory.create("BackShade")}postConfig(){}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("backShade"),"onclick","//event:backShadeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:backShadeClicked",t,this.component.getComponentIndex()),this}disableAfter(t){this.mountSelf(),this.getComponent().get("backShade").setAttributeValue("class","back-shade fade"),setTimeout(()=>{this.getComponent().get("backShade").setStyle("display","none")},t),setTimeout(()=>{justright_core_v1.CanvasStyles.disableStyle(BackShade.COMPONENT_NAME)},t+1)}disable(){this.disableAfter(500)}enable(){justright_core_v1.CanvasStyles.enableStyle(BackShade.COMPONENT_NAME),this.mountSelf(),this.getComponent().get("backShade").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("backShade").setAttributeValue("class","back-shade fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||justright_core_v1.CanvasRoot.addBodyElement(this.getComponent().getRootElement())}removeSelf(){this.getComponent().remove()}}const LOG$1=new coreutil_v1.Logger("Button");class Button{static get COMPONENT_NAME(){return"Button"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/button.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/button.css"}static get TYPE_PRIMARY(){return"btn-primary"}static get TYPE_SECONDARY(){return"btn-secondary"}static get TYPE_SUCCESS(){return"btn-success"}static get TYPE_INFO(){return"btn-info"}static get TYPE_WARNING(){return"btn-warning"}static get TYPE_DANGER(){return"btn-danger"}static get TYPE_LIGHT(){return"btn-light"}static get TYPE_DARK(){return"btn-dark"}constructor(t,e=Button.TYPE_PRIMARY){this.label=t,this.componentFactory=justright_core_v1.ComponentFactory,this.buttonType=e,this.eventRegistry=justright_core_v1.EventRegistry}createComponent(){this.component=this.componentFactory.create("Button")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(Button.COMPONENT_NAME),this.component.get("button").setChild(this.label),this.component.get("button").setAttributeValue("class","btn "+this.buttonType)}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("button"),"onclick","//event:buttonClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:buttonClicked",t,this.component.getComponentIndex()),this}disable(){this.getComponent().get("button").setAttributeValue("disabled","true")}enable(){this.getComponent().get("button").removeAttribute("disabled")}}const LOG$2=new coreutil_v1.Logger("DialogBox");class DialogBox{static get COMPONENT_NAME(){return"DialogBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/dialogBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/dialogBox.css"}constructor(){this.eventRegistry=justright_core_v1.EventRegistry,this.componentFactory=justright_core_v1.ComponentFactory,this.injector=mindi_v1.Injector,this.component=null,this.backShade=null,this.stylesRegistry=justright_core_v1.StylesRegistry}createComponent(){LOG$2.info("creating component"),this.component=this.componentFactory.create("DialogBox")}postConfig(){this.eventRegistry.attach(this.component.get("closeButton"),"onclick","//event:closeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:closeClicked",new coreutil_v1.ObjectFunction(this,this.hide),this.component.getComponentIndex())}getComponent(){return this.component}setTitle(t){this.getComponent().setChild("title",t)}setFooter(t){this.getComponent().get("footer").setStyle("display","block"),this.getComponent().setChild("footer",t)}setContent(t){this.getComponent().setChild("content",t)}set(t,e){this.getComponent().set(t,e)}hide(){this.initBackShade(),this.mountSelf(),this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade"),setTimeout(()=>{this.getComponent().get("dialogBox").setStyle("display","none");this.backShade.disableAfter(500)},200),setTimeout(()=>{justright_core_v1.CanvasStyles.disableStyle(DialogBox.COMPONENT_NAME)},201)}show(){justright_core_v1.CanvasStyles.enableStyle(DialogBox.COMPONENT_NAME),this.initBackShade(),this.mountSelf(),this.backShade.enable(),this.getComponent().get("dialogBox").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||justright_core_v1.CanvasRoot.addBodyElement(this.getComponent().getRootElement())}initBackShade(){this.backShade||(this.backShade=this.injector.prototypeInstance(BackShade).withClickListener(new coreutil_v1.ObjectFunction(this,this.hide)),this.backShade.mountSelf())}removeSelf(){justright_core_v1.CanvasStyles.removeStyle(DialogBox.COMPONENT_NAME),this.getComponent().removeSelf()}}const LOG$3=new coreutil_v1.Logger("CheckBox");class CheckBox{static get COMPONENT_NAME(){return"CheckBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/checkBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/checkBox.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.dataBindRegistry=justright_core_v1.DataBindRegistry,this.name=t}createComponent(){this.component=this.componentFactory.create("CheckBox")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(CheckBox.COMPONENT_NAME),this.component.get("checkBox").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return this.dataBindRegistry.add(justright_core_v1.InputElementDataBinding.link(t,e).to(this.component.get("checkBox"))),this}withClickListener(t){return this.eventRegistry.attach(this.component.get("checkBox"),"onclick","//event:checkBoxClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:checkBoxClicked",t,this.component.getComponentIndex()),this}withEnterListener(t){this.eventRegistry.attach(this.component.get("checkBox"),"onkeyup","//event:checkBoxEnter",this.component.getComponentIndex());let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&t.call()});return this.eventRegistry.listen("//event:checkBoxEnter",e,this.component.getComponentIndex()),this}}const LOG$4=new coreutil_v1.Logger("EmailInput");class EmailInput{static get COMPONENT_NAME(){return"EmailInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/emailInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/emailInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.dataBindRegistry=justright_core_v1.DataBindRegistry,this.name=t,this.validator=(new justright_core_v1.EmailValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideValidationError))}createComponent(){this.component=this.componentFactory.create("EmailInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(EmailInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get("emailInput"),n=this.component.get("emailError");e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:emailInputBlur",t),this.eventRegistry.attach(n,"onclick","//event:emailErrorClicked",t),this.eventRegistry.attach(e,"onkeyup","//event:emailInputEnter",t),this.eventRegistry.listen("//event:emailInputBlur",new coreutil_v1.ObjectFunction(this,this.emailInputBlurred),t),this.eventRegistry.listen("//event:emailErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideValidationError),t);let i=new coreutil_v1.ObjectFunction(this,t=>{13!==t.getKeyCode()||this.validator.isValid()||(this.showValidationError(),this.selectAll())});this.eventRegistry.listen("//event:emailInputEnter",i,t),this.withPlaceholder("Email")}getComponent(){return this.component}getValidator(){return this.validator}withModel(t){return this.dataBindRegistry.add(justright_core_v1.InputElementDataBinding.link(t,this.validator).to(this.component.get("emailInput"))),this}withPlaceholder(t){return this.component.get("emailInput").setAttributeValue("placeholder",t),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:emailInputEnter",e,this.component.getComponentIndex()),this}emailInputBlurred(){this.validator.isValid()?this.hideValidationError():this.showValidationError()}showValidationError(){this.component.get("emailError").setStyle("display","block")}hideValidationError(){this.component.get("emailError").setStyle("display","none")}focus(){this.component.get("emailInput").focus()}selectAll(){this.component.get("emailInput").selectAll()}}const LOG$5=new coreutil_v1.Logger("PasswordInput");class PasswordInput{static get COMPONENT_NAME(){return"PasswordInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.dataBindRegistry=justright_core_v1.DataBindRegistry,this.name=t,this.validator=(new justright_core_v1.RequiredValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideValidationError))}createComponent(){this.component=this.componentFactory.create("PasswordInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(PasswordInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get("passwordInput"),n=this.component.get("passwordError");e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:passwordInputBlur",t),this.eventRegistry.attach(n,"onclick","//event:passwordErrorClicked",t),this.eventRegistry.attach(e,"onkeyup","//event:passwordInputEnter",t),this.eventRegistry.listen("//event:passwordInputBlur",new coreutil_v1.ObjectFunction(this,this.passwordInputBlurred),t),this.eventRegistry.listen("//event:passwordErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideValidationError),t);let i=new coreutil_v1.ObjectFunction(this,t=>{13!==t.getKeyCode()||this.validator.isValid()||(this.showValidationError(),this.selectAll())});this.eventRegistry.listen("//event:passwordInputEnter",i,this.component.getComponentIndex()),this.withPlaceholder("Password")}getComponent(){return this.component}getValidator(){return this.validator}withModel(t){return this.dataBindRegistry.add(justright_core_v1.InputElementDataBinding.link(t,this.validator).to(this.component.get("passwordInput"))),this}withPlaceholder(t){return this.component.get("passwordInput").setAttributeValue("placeholder",t),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:passwordInputEnter",e,this.component.getComponentIndex()),this}passwordInputBlurred(){this.validator.isValid()?this.hideValidationError():this.showValidationError()}showValidationError(){this.component.get("passwordError").setStyle("display","block")}hideValidationError(){this.component.get("passwordError").setStyle("display","none")}focus(){this.component.get("passwordInput").focus()}selectAll(){this.component.get("passwordInput").selectAll()}}const LOG$6=new coreutil_v1.Logger("PasswordMatcherInput");class PasswordMatcherInput{static get COMPONENT_NAME(){return"PasswordMatcherInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.dataBindRegistry=justright_core_v1.DataBindRegistry,this.name=t,this.validator=(new justright_core_v1.RequiredValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideValidationError))}createComponent(){this.component=this.componentFactory.create("PasswordMatcherInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(PasswordMatcherInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get("passwordMatcherInput"),n=this.component.get("passwordMatcherError");e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:passwordMatcherInputBlur",t),this.eventRegistry.attach(n,"onclick","//event:passwordMatcherErrorClicked",t),this.eventRegistry.attach(e,"onkeyup","//event:passwordMatcherInputEnter",t),this.eventRegistry.listen("//event:passwordMatcherInputBlur",new coreutil_v1.ObjectFunction(this,this.passwordMatcherInputBlurred),t),this.eventRegistry.listen("//event:passwordMatcherErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideValidationError),t);let i=new coreutil_v1.ObjectFunction(this,t=>{13!==t.getKeyCode()||this.validator.isValid()||(this.showValidationError(),this.selectAll())});this.eventRegistry.listen("//event:passwordMatcherInputEnter",i,this.component.getComponentIndex()),this.withPlaceholder("Password","Confirm password")}getComponent(){return this.component}getValidator(){return this.validator}withModel(t){return this.dataBindRegistry.add(justright_core_v1.InputElementDataBinding.link(t,this.validator).to(this.component.get("passwordMatcherInput"))),this}withPlaceholder(t,e){return this.component.get("passwordMatcherInput").setAttributeValue("placeholder",t),this.component.get("passwordMatcherControlInput").setAttributeValue("placeholder",e),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:passwordMatcherInputEnter",e,this.component.getComponentIndex()),this}passwordMatcherInputBlurred(){this.validator.isValid()?this.hideValidationError():this.showValidationError()}showValidationError(){this.component.get("passwordMatcherError").setStyle("display","block")}hideValidationError(){this.component.get("passwordMatcherError").setStyle("display","none")}focus(){this.component.get("passwordMatcherInput").focus()}selectAll(){this.component.get("passwordMatcherInput").selectAll()}}const LOG$7=new coreutil_v1.Logger("TextInput");class TextInput{static get COMPONENT_NAME(){return"TextInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/textInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/textInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.dataBindRegistry=justright_core_v1.DataBindRegistry,this.name=t}createComponent(){this.component=this.componentFactory.create("TextInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(TextInput.COMPONENT_NAME),this.component.get("textInput").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return this.dataBindRegistry.add(justright_core_v1.InputElementDataBinding.link(t,e).to(this.component.get("textInput"))),this}withPlaceholder(t){return this.component.get("textInput").setAttributeValue("placeholder",t),this}withClickListener(t){return this.eventRegistry.attach(this.component.get("textInput"),"onclick","//event:textInputClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:textInputClicked",t,this.component.getComponentIndex()),this}withEnterListener(t){this.eventRegistry.attach(this.component.get("textInput"),"onkeyup","//event:textInputEnter",this.component.getComponentIndex());let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&t.call()});return this.eventRegistry.listen("//event:textInputEnter",e,this.component.getComponentIndex()),this}}exports.BackShade=BackShade,exports.Button=Button,exports.CheckBox=CheckBox,exports.DialogBox=DialogBox,exports.EmailInput=EmailInput,exports.PasswordInput=PasswordInput,exports.PasswordMatcherInput=PasswordMatcherInput,exports.TextInput=TextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
