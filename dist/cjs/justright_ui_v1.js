"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var justright_core_v1=require("justright_core_v1"),coreutil_v1=require("coreutil_v1"),mindi_v1=require("mindi_v1");const LOG=new coreutil_v1.Logger("BackShade");class BackShade{static get COMPONENT_NAME(){return"BackShade"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/backShade.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/backShade.css"}constructor(){this.eventRegistry=justright_core_v1.EventRegistry,this.componentFactory=justright_core_v1.ComponentFactory}createComponent(){LOG.info("creating component"),this.component=this.componentFactory.create("BackShade")}postConfig(){}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("backShade"),"onclick","//event:backShadeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:backShadeClicked",t,this.component.getComponentIndex()),this}disableAfter(t){this.mountSelf(),this.getComponent().get("backShade").setAttributeValue("class","back-shade fade"),setTimeout(()=>{this.getComponent().get("backShade").setStyle("display","none")},t),setTimeout(()=>{justright_core_v1.CanvasStyles.disableStyle(BackShade.COMPONENT_NAME)},t+1)}disable(){this.disableAfter(500)}enable(){justright_core_v1.CanvasStyles.enableStyle(BackShade.COMPONENT_NAME),this.mountSelf(),this.getComponent().get("backShade").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("backShade").setAttributeValue("class","back-shade fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||justright_core_v1.CanvasRoot.addBodyElement(this.getComponent().getRootElement())}removeSelf(){this.getComponent().remove()}}const LOG$1=new coreutil_v1.Logger("Button");class Button{static get COMPONENT_NAME(){return"Button"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/button.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/button.css"}static get TYPE_PRIMARY(){return"btn-primary"}static get TYPE_SECONDARY(){return"btn-secondary"}static get TYPE_SUCCESS(){return"btn-success"}static get TYPE_INFO(){return"btn-info"}static get TYPE_WARNING(){return"btn-warning"}static get TYPE_DANGER(){return"btn-danger"}static get TYPE_LIGHT(){return"btn-light"}static get TYPE_DARK(){return"btn-dark"}constructor(t,e=Button.TYPE_PRIMARY){this.label=t,this.componentFactory=justright_core_v1.ComponentFactory,this.buttonType=e,this.eventRegistry=justright_core_v1.EventRegistry}createComponent(){this.component=this.componentFactory.create("Button")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(Button.COMPONENT_NAME),this.component.get("button").setChild(this.label),this.component.get("button").setAttributeValue("class","btn "+this.buttonType)}getComponent(){return this.component}withClickListener(t){return this.eventRegistry.attach(this.component.get("button"),"onclick","//event:buttonClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:buttonClicked",t,this.component.getComponentIndex()),this}disable(){this.getComponent().get("button").setAttributeValue("disabled","true")}enable(){this.getComponent().get("button").removeAttribute("disabled")}}const LOG$2=new coreutil_v1.Logger("DialogBox");class DialogBox{static get COMPONENT_NAME(){return"DialogBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/dialogBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/dialogBox.css"}constructor(){this.eventRegistry=justright_core_v1.EventRegistry,this.componentFactory=justright_core_v1.ComponentFactory,this.injector=mindi_v1.Injector,this.component=null,this.backShade=null,this.stylesRegistry=justright_core_v1.StylesRegistry}createComponent(){LOG$2.info("creating component"),this.component=this.componentFactory.create("DialogBox")}postConfig(){this.eventRegistry.attach(this.component.get("closeButton"),"onclick","//event:closeClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:closeClicked",new coreutil_v1.ObjectFunction(this,this.hide),this.component.getComponentIndex())}getComponent(){return this.component}setTitle(t){this.getComponent().setChild("title",t)}setFooter(t){this.getComponent().get("footer").setStyle("display","block"),this.getComponent().setChild("footer",t)}setContent(t){this.getComponent().setChild("content",t)}set(t,e){this.getComponent().set(t,e)}hide(){this.initBackShade(),this.mountSelf(),this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade"),setTimeout(()=>{this.getComponent().get("dialogBox").setStyle("display","none");this.backShade.disableAfter(500)},200),setTimeout(()=>{justright_core_v1.CanvasStyles.disableStyle(DialogBox.COMPONENT_NAME)},201)}show(){justright_core_v1.CanvasStyles.enableStyle(DialogBox.COMPONENT_NAME),this.initBackShade(),this.mountSelf(),this.backShade.enable(),this.getComponent().get("dialogBox").setStyle("display","block"),setTimeout(()=>{this.getComponent().get("dialogBox").setAttributeValue("class","dialogbox fade show")},100)}mountSelf(){this.getComponent().getRootElement().isMounted()||justright_core_v1.CanvasRoot.addBodyElement(this.getComponent().getRootElement())}initBackShade(){this.backShade||(this.backShade=this.injector.prototypeInstance(BackShade).withClickListener(new coreutil_v1.ObjectFunction(this,this.hide)),this.backShade.mountSelf())}removeSelf(){justright_core_v1.CanvasStyles.removeStyle(DialogBox.COMPONENT_NAME),this.getComponent().removeSelf()}}const LOG$3=new coreutil_v1.Logger("CheckBox");class CheckBox{static get COMPONENT_NAME(){return"CheckBox"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/checkBox.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/checkBox.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.name=t}createComponent(){this.component=this.componentFactory.create("CheckBox")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(CheckBox.COMPONENT_NAME),this.component.get("checkBox").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return justright_core_v1.InputElementDataBinding.link(t,e).to(this.component.get("checkBox")),this}withClickListener(t){return this.eventRegistry.attach(this.component.get("checkBox"),"onclick","//event:checkBoxClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:checkBoxClicked",t,this.component.getComponentIndex()),this}withEnterListener(t){this.eventRegistry.attach(this.component.get("checkBox"),"onkeyup","//event:checkBoxEnter",this.component.getComponentIndex());let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&t.call()});return this.eventRegistry.listen("//event:checkBoxEnter",e,this.component.getComponentIndex()),this}}const LOG$4=new coreutil_v1.Logger("EmailInput");class EmailInput{static get COMPONENT_NAME(){return"EmailInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/emailInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/emailInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.name=t,this.validator=(new justright_core_v1.EmailValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideValidationError)),this.changed=!1}createComponent(){this.component=this.componentFactory.create("EmailInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(EmailInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get("emailInput"),n=this.component.get("emailError");e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:emailInputBlur",t),this.eventRegistry.attach(e,"onkeyup","//event:emailInputKeyUp",t),this.eventRegistry.attach(e,"onchange","//event:emailInputChange",t),this.eventRegistry.attach(n,"onclick","//event:emailErrorClicked",t),this.eventRegistry.listen("//event:emailInputBlur",new coreutil_v1.ObjectFunction(this,this.emailInputBlurred),t),this.eventRegistry.listen("//event:emailInputKeyUp",new coreutil_v1.ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen("//event:emailInputChange",new coreutil_v1.ObjectFunction(this,this.change),t),this.eventRegistry.listen("//event:emailErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideValidationError),t),this.withPlaceholder("Email")}getComponent(){return this.component}change(){this.changed=!0}keyUp(t){this.changed=!0,13!==t.getKeyCode()||this.validator.isValid()||(this.showValidationError(),this.selectAll())}getValidator(){return this.validator}withModel(t){return justright_core_v1.InputElementDataBinding.link(t,this.validator).to(this.component.get("emailInput")),this}withPlaceholder(t){return this.component.get("emailInput").setAttributeValue("placeholder",t),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:emailInputKeyUp",e,this.component.getComponentIndex()),this}emailInputBlurred(){this.changed&&(this.validator.isValid()?this.hideValidationError():this.showValidationError())}showValidationError(){this.component.get("emailError").setStyle("display","block")}hideValidationError(){this.component.get("emailError").setStyle("display","none")}focus(){this.component.get("emailInput").focus()}selectAll(){this.component.get("emailInput").selectAll()}enable(){this.component.get("emailInput").enable()}disable(){this.component.get("emailInput").disable()}}const LOG$5=new coreutil_v1.Logger("PasswordInput"),INPUT="passwordInput",ERROR="passwordError";class PasswordInput{static get COMPONENT_NAME(){return"PasswordInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.name=t,this.validator=(new justright_core_v1.RequiredValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideValidationError)),this.changed=!1}createComponent(){this.component=this.componentFactory.create("PasswordInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(PasswordInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get(INPUT),n=this.component.get(ERROR);e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:passwordInputBlur",t),this.eventRegistry.attach(e,"onkeyup","//event:passwordInputKeyUp",t),this.eventRegistry.attach(e,"onchange","//event:passwordInputChange",t),this.eventRegistry.attach(n,"onclick","//event:passwordErrorClicked",t),this.eventRegistry.listen("//event:passwordInputBlur",new coreutil_v1.ObjectFunction(this,this.passwordInputBlurred),t),this.eventRegistry.listen("//event:passwordInputKeyUp",new coreutil_v1.ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen("//event:passwordInputChange",new coreutil_v1.ObjectFunction(this,this.change),t),this.eventRegistry.listen("//event:passwordErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideValidationError),t),this.withPlaceholder("Password")}getComponent(){return this.component}change(){this.changed=!0}keyUp(t){this.changed=!0,13!==t.getKeyCode()||this.validator.isValid()||(this.showValidationError(),this.selectAll())}getValidator(){return this.validator}withModel(t){return justright_core_v1.InputElementDataBinding.link(t,this.validator).to(this.component.get(INPUT)),this}withPlaceholder(t){return this.component.get(INPUT).setAttributeValue("placeholder",t),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:passwordInputKeyUp",e,this.component.getComponentIndex()),this}passwordInputBlurred(){this.changed&&(this.validator.isValid()?this.hideValidationError():this.showValidationError())}showValidationError(){this.component.get(ERROR).setStyle("display","block")}hideValidationError(){this.component.get(ERROR).setStyle("display","none")}focus(){this.component.get(INPUT).focus()}selectAll(){this.component.get(INPUT).selectAll()}enable(){this.component.get(INPUT).enable()}disable(){this.component.get(INPUT).disable()}}const LOG$6=new coreutil_v1.Logger("PasswordMatcherInput"),INPUT$1="passwordMatcherInput",CONTROL_INPUT="passwordMatcherControlInput",ERROR$1="passwordMatcherError",CONTROL_ERROR="passwordMatcherControlError";class PasswordMatcherInput{static get COMPONENT_NAME(){return"PasswordMatcherInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/passwordMatcherInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.name=t,this.passwordValidator=(new justright_core_v1.PasswordValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hidePasswordValidationError)),this.controlValidator=(new justright_core_v1.EqualsValidator).withValidListener(new coreutil_v1.ObjectFunction(this,this.hideControlValidationError)),this.validator=(new justright_core_v1.AndValidatorSet).withValidator(this.passwordValidator).withValidator(this.controlValidator),this.changed=!1,this.controlChanged=!1}createComponent(){this.component=this.componentFactory.create("PasswordMatcherInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(PasswordMatcherInput.COMPONENT_NAME);let t=this.component.getComponentIndex(),e=this.component.get(INPUT$1),n=this.component.get(ERROR$1),o=this.component.get(CONTROL_INPUT),i=this.component.get(CONTROL_ERROR);e.setAttributeValue("name",this.name),this.eventRegistry.attach(e,"onblur","//event:passwordMatcherInputBlur",t),this.eventRegistry.attach(e,"onkeyup","//event:passwordMatcherInputKeyUp",t),this.eventRegistry.attach(e,"onchange","//event:passwordMatcherInputChange",t),this.eventRegistry.attach(n,"onclick","//event:passwordMatcherErrorClicked",t),this.eventRegistry.attach(o,"onblur","//event:passwordMatcherControlInputBlur",t),this.eventRegistry.attach(o,"onkeyup","//event:passwordMatcherControlInputKeyUp",t),this.eventRegistry.attach(o,"onchange","//event:passwordMatcherControlInputChange",t),this.eventRegistry.attach(i,"onclick","//event:passwordMatcherControlErrorClicked",t),this.eventRegistry.listen("//event:passwordMatcherInputBlur",new coreutil_v1.ObjectFunction(this,this.passwordMatcherInputBlurred),t),this.eventRegistry.listen("//event:passwordMatcherInputKeyUp",new coreutil_v1.ObjectFunction(this,this.keyUp),t),this.eventRegistry.listen("//event:passwordMatcherInputChange",new coreutil_v1.ObjectFunction(this,this.change),t),this.eventRegistry.listen("//event:passwordMatcherErrorClicked",new coreutil_v1.ObjectFunction(this,this.hidePasswordValidationError),t),this.eventRegistry.listen("//event:passwordMatcherControlInputBlur",new coreutil_v1.ObjectFunction(this,this.passwordMatcherControlInputBlurred),t),this.eventRegistry.listen("//event:passwordMatcherControlInputKeyUp",new coreutil_v1.ObjectFunction(this,this.controlKeyUp),t),this.eventRegistry.listen("//event:passwordMatcherControlInputChange",new coreutil_v1.ObjectFunction(this,this.controlChange),t),this.eventRegistry.listen("//event:passwordMatcherControlErrorClicked",new coreutil_v1.ObjectFunction(this,this.hideControlValidationError),t),this.withPlaceholder("Password","Confirm password")}controlChange(){this.changed=!0}controlKeyUp(t){this.controlChanged=!0,13===t.getKeyCode()&&(this.controlValidator.isValid()||(this.showControlValidationError(),this.selectAllControl()))}change(){this.changed=!0}keyUp(t){this.changed=!0,this.controlValidator.setValue(this.component.get(INPUT$1).getValue()),this.controlValidator.invalid(),this.component.get(CONTROL_INPUT).setValue(""),13===t.getKeyCode()&&(this.passwordValidator.isValid()?(this.focusControl(),this.selectAllControl()):(this.showPasswordValidationError(),this.selectAll()))}getComponent(){return this.component}getValidator(){return this.validator}withModel(t){return justright_core_v1.InputElementDataBinding.link(t,this.passwordValidator).to(this.component.get(INPUT$1)),justright_core_v1.InputElementDataBinding.link(t,this.controlValidator).to(this.component.get(CONTROL_INPUT)),this}withPlaceholder(t,e){return this.component.get(INPUT$1).setAttributeValue("placeholder",t),this.component.get(CONTROL_INPUT).setAttributeValue("placeholder",e),this}withEnterListener(t){let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&this.validator.isValid()&&t.call()});return this.eventRegistry.listen("//event:passwordMatcherControlInputKeyUp",e,this.component.getComponentIndex()),this}passwordMatcherControlInputBlurred(){this.controlChanged&&(this.controlValidator.isValid()?this.hideControlValidationError():this.showControlValidationError())}passwordMatcherInputBlurred(){this.changed&&(this.passwordValidator.isValid()?this.hidePasswordValidationError():this.showPasswordValidationError())}showPasswordValidationError(){this.component.get(ERROR$1).setStyle("display","block")}hidePasswordValidationError(){this.component.get(ERROR$1).setStyle("display","none")}showControlValidationError(){this.component.get(CONTROL_ERROR).setStyle("display","block")}hideControlValidationError(){this.component.get(CONTROL_ERROR).setStyle("display","none")}focus(){this.component.get(INPUT$1).focus()}focusControl(){this.component.get(CONTROL_INPUT).focus()}selectAll(){this.component.get(INPUT$1).selectAll()}selectAllControl(){this.component.get(CONTROL_INPUT).selectAll()}enable(){this.component.get(INPUT$1).enable()}disable(){this.component.get(INPUT$1).disable()}enableControl(){this.component.get(CONTROL_INPUT).enable()}disableControl(){this.component.get(CONTROL_INPUT).disable()}}const LOG$7=new coreutil_v1.Logger("TextInput");class TextInput{static get COMPONENT_NAME(){return"TextInput"}static get TEMPLATE_URL(){return"/assets/justrightjs-ui/textInput.html"}static get STYLES_URL(){return"/assets/justrightjs-ui/textInput.css"}constructor(t){this.componentFactory=justright_core_v1.ComponentFactory,this.eventRegistry=justright_core_v1.EventRegistry,this.name=t}createComponent(){this.component=this.componentFactory.create("TextInput")}postConfig(){justright_core_v1.CanvasStyles.enableStyle(TextInput.COMPONENT_NAME),this.component.get("textInput").setAttributeValue("name",this.name)}getComponent(){return this.component}withModel(t,e){return justright_core_v1.InputElementDataBinding.link(t,e).to(this.component.get("textInput")),this}withPlaceholder(t){return this.component.get("textInput").setAttributeValue("placeholder",t),this}withClickListener(t){return this.eventRegistry.attach(this.component.get("textInput"),"onclick","//event:textInputClicked",this.component.getComponentIndex()),this.eventRegistry.listen("//event:textInputClicked",t,this.component.getComponentIndex()),this}withEnterListener(t){this.eventRegistry.attach(this.component.get("textInput"),"onkeyup","//event:textInputEnter",this.component.getComponentIndex());let e=new coreutil_v1.ObjectFunction(this,e=>{13===e.getKeyCode()&&t.call()});return this.eventRegistry.listen("//event:textInputEnter",e,this.component.getComponentIndex()),this}}exports.BackShade=BackShade,exports.Button=Button,exports.CheckBox=CheckBox,exports.DialogBox=DialogBox,exports.EmailInput=EmailInput,exports.PasswordInput=PasswordInput,exports.PasswordMatcherInput=PasswordMatcherInput,exports.TextInput=TextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
